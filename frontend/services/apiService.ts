import { Report } from '../src/types';
import { ControlFlowProvider } from '../../store';
import { parseReportContent } from '../src/utils/reportParser';

const API_URL = 'http://127.0.0.1:5001/api/run-workflow';

interface RunWorkflowPayload {
    task: string;
    provider: ControlFlowProvider;
    base_url?: string;
}

/**
 * Executes a workflow on the Python backend.
 *
 * @param query - The user's natural language query.
 * @param provider - The selected LLM provider ('openai', 'gemini', 'local').
 * @param baseUrl - The optional base URL for a local model.
 * @returns A promise that resolves to the final report from the backend.
 */
export const runWorkflow = async (
    query: string, 
    provider: ControlFlowProvider, 
    baseUrl?: string
): Promise<Report> => {
    
    const payload: RunWorkflowPayload = {
        task: query,
        provider: provider,
    };

    if (provider === 'local' && baseUrl) {
        payload.base_url = baseUrl;
    }

    console.log("Frontend Service: Sending request to backend...", { url: API_URL, payload });

    try {
        const response = await fetch(API_URL, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(payload),
        });

        console.log("Frontend Service: Received response from backend", { status: response.status });

        if (!response.ok) {
            const errorData = await response.json().catch(() => ({ error: "Failed to parse error response from backend." }));
            console.error("Frontend Service: Backend returned an error", { errorData });
            throw new Error(errorData.error || `Request failed with status ${response.status}`);
        }

        const data = await response.json();
        console.log("Frontend Service: Successfully parsed backend response", { data });
        
        // Parse the backend response to extract sections
        const parsedSections = parseReportContent(data.result);
        
        // Create a comprehensive Report object with parsed sections
        const comprehensiveReport: Report = {
            executiveSummary: data.result,
            agentFindings: [],
            failedAgents: [],
            crossAgentInsights: `Generated by ControlFlow (Python) with the '${provider}' provider.`,
            actionableRecommendations: parsedSections.actionItems,
            riskAssessment: parsedSections.riskAssessment || "N/A",
            confidenceLevel: parsedSections.confidenceLevel,
            dataQualityNotes: "Based on the synthesis from the selected LLM provider.",
            executionTrace: { fintelQueryAnalysis: parsedSections.queryAnalysis || '', agentInvocations: [] },
            retryAnalysis: parsedSections.retryAnalysis,
            parsedSections: parsedSections,
        };

        return comprehensiveReport;

    } catch (error) {
        console.error("Frontend Service: An error occurred during the API call.", { error });
        const errorMessage = error instanceof Error ? error.message : "An unknown network error occurred.";
        throw new Error(`Failed to execute workflow on Python backend: ${errorMessage}`);
    }
};
