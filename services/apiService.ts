import { Report } from '../types';
import { ControlFlowProvider } from '../store';

const API_URL = 'http://127.0.0.1:5001/api/run-workflow';

interface RunWorkflowPayload {
    task: string;
    provider: ControlFlowProvider;
    base_url?: string;
}

/**
 * Executes a workflow on the Python backend.
 *
 * @param query - The user's natural language query.
 * @param provider - The selected LLM provider ('openai', 'gemini', 'local').
 * @param baseUrl - The optional base URL for a local model.
 * @returns A promise that resolves to the final report from the backend.
 */
export const runWorkflow = async (
    query: string, 
    provider: ControlFlowProvider, 
    baseUrl?: string
): Promise<Report> => {
    
    const payload: RunWorkflowPayload = {
        task: query,
        provider: provider,
    };

    if (provider === 'local' && baseUrl) {
        payload.base_url = baseUrl;
    }

    try {
        const response = await fetch(API_URL, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(payload),
        });

        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.error || `Request failed with status ${response.status}`);
        }

        const data = await response.json();
        
        // Wrap the backend's string response in a Report object for the UI
        const simplifiedReport: Report = {
            executiveSummary: data.result,
            agentFindings: [],
            failedAgents: [],
            crossAgentInsights: `Generated by ControlFlow (Python) with the '${provider}' provider.`,
            actionableRecommendations: [],
            riskAssessment: "N/A",
            confidenceLevel: 0.9,
            dataQualityNotes: "Based on the synthesis from the selected LLM provider.",
            executionTrace: { fintelQueryAnalysis: '', agentInvocations: [] },
        };

        return simplifiedReport;

    } catch (error) {
        const errorMessage = error instanceof Error ? error.message : "An unknown error occurred.";
        throw new Error(`Failed to execute workflow on Python backend: ${errorMessage}`);
    }
};
