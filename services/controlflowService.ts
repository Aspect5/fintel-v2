import { Report } from '../types';

const CONTROLFLOW_API_URL = 'http://127.0.0.1:5001/api/run-workflow';

/**
 * Executes a workflow on the Python-based ControlFlow backend.
 *
 * @param query - The user's natural language query for the financial analysis.
 * @returns A promise that resolves to the final report generated by the backend.
 */
export const runControlFlow = async (query: string): Promise<Report> => {
    try {
        const response = await fetch(CONTROLFLOW_API_URL, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ task: query }),
        });

        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.error || `Request failed with status ${response.status}`);
        }

        const data = await response.json();
        
        // The Python backend returns a final string. We need to wrap it
        // in a Report-like object for the UI to display it correctly.
        // This is a simplified report structure for demonstration.
        const simplifiedReport: Report = {
            executiveSummary: data.result,
            agentFindings: [],
            failedAgents: [],
            crossAgentInsights: "Generated by ControlFlow (Python) backend.",
            actionableRecommendations: [],
            riskAssessment: "N/A",
            confidenceLevel: 0.9,
            dataQualityNotes: "Based on the synthesis from a GPT-4o model.",
            executionTrace: { fintelQueryAnalysis: '', agentInvocations: [] },
        };

        return simplifiedReport;

    } catch (error) {
        console.error("Error communicating with ControlFlow backend:", error);
        const errorMessage = error instanceof Error ? error.message : "An unknown error occurred.";
        // Re-throw a more user-friendly error
        throw new Error(`Failed to execute workflow on Python backend: ${errorMessage}`);
    }
};
